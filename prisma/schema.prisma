// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  firstName    String
  lastName     String
  zipCode      String?
  phone        String?
  email        String?        @unique
  password     String?
  username     String         @unique
  confirmed    Boolean?       @default(false)
  billboards   Billboard[]
  bookmarks    Bookmark[]
  userProfile  UserProfile?
  subscription Subscription[]
  transaction  Transaction[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  profileImage ProfileImage?
  about        String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int           @unique
  userContacts UserContact[]
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  name             String
  extension        String
  url              String
  mime             String
  provider         Provider    @default(AWS_S3)
  providerMetadata Json?
  userProfile      UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userProfileId    Int         @unique
}

model UserContact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  title         String
  contacts      String[]
  type          ContactType
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userProfileId Int
}

model Billboard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  uid               String             @unique @default(uuid())
  title             String
  slug              String             @unique
  description       String?
  images            BillboardImage[]
  thumbnailId       Int?
  type              String
  status            Status             @default(AVAILABLE)
  owner             User               @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId           Int
  bookmarks         Bookmark[]
  billboardLocation BillboardLocation?
  // dimension
  width             Int?
  height            Int?
  // price
  currency          String?
  price             Int?
  rate              Rate?
}

model Bookmark {
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billboardId Int
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId     Int

  @@id([billboardId, ownerId])
}

model BillboardImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  name             String
  extension        String
  url              String
  mime             String
  size             Int //bytes
  width            Int
  height           Int
  provider         Provider  @default(AWS_S3)
  providerMetadata Json?
  billboard        Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billboardId      Int
}

model BillboardLocation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  route                    String?
  neighbourhood            String?
  sublocality              String?
  locality                 String?
  administrativeAreaLevel3 String?
  administrativeAreaLevel2 String?
  administrativeAreaLevel1 String?
  country                  String?
  address                  String?
  lat                      Float
  lng                      Float
  billboard                Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billboardId              Int       @unique
}

model Plan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  name         String
  description  String
  currency     String
  amount       Int
  period       String
  number       Int
  active       Boolean
  discount     Discount[]
  transaction  Transaction[]
  subscription Subscription[]
}

model Discount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  name        String
  description String
  amount      Int
  unit        String
  startDate   DateTime
  endDate     DateTime
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  planId      Int
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  paidAt       DateTime?
  firstName    String
  lastName     String
  email        String?
  phone        String?
  provider     String
  reference    String            @unique
  status       TransactionStatus
  metadata     Json?
  owner        User?              @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ownerId      Int?
  plan         Plan              @relation(fields: [planId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  planId       Int
  subscription Subscription?
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  subscribedAt  DateTime
  expiresAt     DateTime
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  transactionId Int         @unique
  owner         User?       @relation(fields: [ownerId], references: [id])
  ownerId       Int?
  plan          Plan?       @relation(fields: [planId], references: [id])
  planId        Int?
}

enum Provider {
  GCS
  AWS_S3
  CLOUDINARY
  LOCAL
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum Rate {
  PER_MONTH
  PER_YEAR
  FOR_SALE
}

enum ContactType {
  PHONE
  EMAIL
  URL
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REVERSED
}
